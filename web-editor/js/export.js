// 脚本导出系统 - export.js

// 代码生成器基类
class CodeGenerator {
    constructor() {
        this.indentLevel = 0;
        this.indentSize = 4;
    }

    indent() {
        return ' '.repeat(this.indentLevel * this.indentSize);
    }

    increaseIndent() {
        this.indentLevel++;
    }

    decreaseIndent() {
        this.indentLevel = Math.max(0, this.indentLevel - 1);
    }

    addLine(code = '') {
        return this.indent() + code + '\n';
    }

    addComment(comment) {
        return this.addLine(`// ${comment}`);
    }

    addBlock(header, content) {
        let result = this.addLine(header + ' {');
        this.increaseIndent();
        result += content;
        this.decreaseIndent();
        result += this.addLine('}');
        return result;
    }
}

// Render2Go脚本生成器
class Render2GoGenerator extends CodeGenerator {
    constructor() {
        super();
        this.scene = null;
        this.timeline = null;
        this.objects = [];
    }

    generate(sceneData, timelineData, objectsData) {
        this.scene = sceneData;
        this.timeline = timelineData;
        this.objects = objectsData;

        let script = '';

        // 文件头注释
        script += this.generateHeader();

        // 场景配置
        script += this.generateSceneConfig();

        // 对象定义
        script += this.generateObjects();

        // 动画序列
        script += this.generateAnimations();

        return script;
    }

    generateHeader() {
        const date = new Date().toLocaleDateString();
        return this.addComment('Generated by Render2Go Web Editor') +
            this.addComment(`Date: ${date}`) +
            this.addComment('') +
            '\n';
    }

    generateSceneConfig() {
        let config = this.addComment('场景配置');
        config += this.addLine(`scene {`);
        this.increaseIndent();

        config += this.addLine(`name "${this.scene.name}"`);
        config += this.addLine(`size ${this.scene.width} ${this.scene.height}`);
        config += this.addLine(`fps ${this.scene.frameRate}`);
        config += this.addLine(`duration ${this.scene.duration}`);
        config += this.addLine(`background "${this.scene.backgroundColor}"`);

        this.decreaseIndent();
        config += this.addLine('}');
        config += '\n';

        return config;
    }

    generateObjects() {
        if (this.objects.length === 0) return '';

        let objectsCode = this.addComment('对象定义');

        this.objects.forEach(object => {
            objectsCode += this.generateObject(object);
            objectsCode += '\n';
        });

        return objectsCode;
    }

    generateObject(object) {
        let objCode = '';

        switch (object.type) {
            case 'circle':
                objCode += this.generateCircle(object);
                break;
            case 'rectangle':
                objCode += this.generateRectangle(object);
                break;
            case 'text':
                objCode += this.generateText(object);
                break;
            case 'line':
                objCode += this.generateLine(object);
                break;
            case 'triangle':
                objCode += this.generateTriangle(object);
                break;
            default:
                objCode += this.addComment(`Unsupported object type: ${object.type}`);
        }

        return objCode;
    }

    generateCircle(object) {
        let code = this.addLine(`${object.name} = Circle {`);
        this.increaseIndent();

        code += this.addLine(`position ${object.x} ${object.y}`);
        code += this.addLine(`radius ${object.radius || object.width / 2}`);

        if (object.color && object.color !== '#000000') {
            code += this.addLine(`fill "${object.color}"`);
        }

        if (object.strokeColor && object.strokeWidth > 0) {
            code += this.addLine(`stroke "${object.strokeColor}" ${object.strokeWidth}`);
        }

        if (object.opacity !== undefined && object.opacity !== 1) {
            code += this.addLine(`opacity ${object.opacity}`);
        }

        this.decreaseIndent();
        code += this.addLine('}');

        return code;
    }

    generateRectangle(object) {
        let code = this.addLine(`${object.name} = Rectangle {`);
        this.increaseIndent();

        code += this.addLine(`position ${object.x} ${object.y}`);
        code += this.addLine(`size ${object.width} ${object.height}`);

        if (object.color && object.color !== '#000000') {
            code += this.addLine(`fill "${object.color}"`);
        }

        if (object.strokeColor && object.strokeWidth > 0) {
            code += this.addLine(`stroke "${object.strokeColor}" ${object.strokeWidth}`);
        }

        if (object.opacity !== undefined && object.opacity !== 1) {
            code += this.addLine(`opacity ${object.opacity}`);
        }

        if (object.rotation) {
            code += this.addLine(`rotation ${object.rotation}`);
        }

        this.decreaseIndent();
        code += this.addLine('}');

        return code;
    }

    generateText(object) {
        let code = this.addLine(`${object.name} = Text {`);
        this.increaseIndent();

        code += this.addLine(`position ${object.x} ${object.y}`);
        code += this.addLine(`text "${this.escapeString(object.text || 'Sample Text')}"`);

        if (object.fontSize && object.fontSize !== 16) {
            code += this.addLine(`fontSize ${object.fontSize}`);
        }

        if (object.fontFamily && object.fontFamily !== 'Arial') {
            code += this.addLine(`fontFamily "${object.fontFamily}"`);
        }

        if (object.color && object.color !== '#000000') {
            code += this.addLine(`color "${object.color}"`);
        }

        if (object.textAlign && object.textAlign !== 'left') {
            code += this.addLine(`align "${object.textAlign}"`);
        }

        if (object.opacity !== undefined && object.opacity !== 1) {
            code += this.addLine(`opacity ${object.opacity}`);
        }

        this.decreaseIndent();
        code += this.addLine('}');

        return code;
    }

    generateLine(object) {
        let code = this.addLine(`${object.name} = Line {`);
        this.increaseIndent();

        code += this.addLine(`start ${object.x} ${object.y}`);
        code += this.addLine(`end ${object.x + object.width} ${object.y + object.height}`);

        if (object.strokeColor) {
            code += this.addLine(`color "${object.strokeColor}"`);
        }

        if (object.strokeWidth && object.strokeWidth !== 1) {
            code += this.addLine(`width ${object.strokeWidth}`);
        }

        if (object.opacity !== undefined && object.opacity !== 1) {
            code += this.addLine(`opacity ${object.opacity}`);
        }

        this.decreaseIndent();
        code += this.addLine('}');

        return code;
    }

    generateTriangle(object) {
        let code = this.addLine(`${object.name} = Triangle {`);
        this.increaseIndent();

        // 计算三角形的三个顶点
        const centerX = object.x + object.width / 2;
        const centerY = object.y + object.height / 2;
        const topX = centerX;
        const topY = object.y;
        const leftX = object.x;
        const leftY = object.y + object.height;
        const rightX = object.x + object.width;
        const rightY = object.y + object.height;

        code += this.addLine(`points ${topX} ${topY} ${leftX} ${leftY} ${rightX} ${rightY}`);

        if (object.fillColor && object.fillColor !== '#000000') {
            code += this.addLine(`fill "${object.fillColor}"`);
        }

        if (object.strokeColor && object.strokeWidth > 0) {
            code += this.addLine(`stroke "${object.strokeColor}" ${object.strokeWidth}`);
        }

        if (object.opacity !== undefined && object.opacity !== 1) {
            code += this.addLine(`opacity ${object.opacity}`);
        }

        this.decreaseIndent();
        code += this.addLine('}');

        return code;
    }

    generateAnimations() {
        if (!this.timeline || !this.timeline.tracks || this.timeline.tracks.length === 0) {
            return '';
        }

        let animCode = this.addComment('动画定义');
        animCode += this.addLine('animate {');
        this.increaseIndent();

        // 按对象分组轨道
        const objectTracks = {};
        this.timeline.tracks.forEach(track => {
            if (!objectTracks[track.objectId]) {
                objectTracks[track.objectId] = [];
            }
            objectTracks[track.objectId].push(track);
        });

        // 为每个对象生成动画
        Object.keys(objectTracks).forEach(objectId => {
            const object = this.objects.find(obj => obj.id === objectId);
            if (!object) return;

            animCode += this.addLine(`${object.name} {`);
            this.increaseIndent();

            const tracks = objectTracks[objectId];
            tracks.forEach(track => {
                animCode += this.generateTrackAnimation(track);
            });

            this.decreaseIndent();
            animCode += this.addLine('}');
            animCode += '\n';
        });

        this.decreaseIndent();
        animCode += this.addLine('}');

        return animCode;
    }

    generateTrackAnimation(track) {
        if (track.keyframes.length === 0) return '';

        let trackCode = this.addLine(`${track.property} {`);
        this.increaseIndent();

        track.keyframes.forEach(keyframe => {
            const value = this.formatValue(keyframe.value);
            const ease = keyframe.ease !== 'linear' ? ` ${keyframe.ease}` : '';
            trackCode += this.addLine(`${keyframe.time}s: ${value}${ease}`);
        });

        this.decreaseIndent();
        trackCode += this.addLine('}');

        return trackCode;
    }

    formatValue(value) {
        if (typeof value === 'string') {
            if (value.startsWith('#')) {
                return `"${value}"`;
            }
            return `"${this.escapeString(value)}"`;
        }

        if (typeof value === 'number') {
            return value.toString();
        }

        if (typeof value === 'object') {
            if (value.x !== undefined && value.y !== undefined) {
                return `${value.x} ${value.y}`;
            }
            if (value.width !== undefined && value.height !== undefined) {
                return `${value.width} ${value.height}`;
            }
        }

        return value.toString();
    }

    escapeString(str) {
        return str.replace(/"/g, '\\"').replace(/\n/g, '\\n');
    }
}

// 导出管理器
class ExportManager extends EventEmitter {
    constructor() {
        super();
        this.generators = {
            'render2go': new Render2GoGenerator()
        };
    }

    exportAsScript(format = 'render2go') {
        const generator = this.generators[format];
        if (!generator) {
            throw new Error(`Unsupported export format: ${format}`);
        }

        try {
            // 收集场景数据
            const sceneData = app.scene.toJSON();
            const timelineData = app.timeline.toJSON();
            const objectsData = app.objectManager.toJSON();

            // 生成脚本
            const script = generator.generate(sceneData, timelineData, objectsData);

            this.emit('exported', { format, script });
            return script;

        } catch (error) {
            this.emit('exportError', error);
            throw error;
        }
    }

    downloadScript(filename, format = 'render2go') {
        try {
            const script = this.exportAsScript(format);
            const extension = this.getFileExtension(format);
            const fullFilename = filename.endsWith(extension) ? filename : filename + extension;

            const blob = new Blob([script], { type: 'text/plain;charset=utf-8' });
            const url = URL.createObjectURL(blob);

            const link = document.createElement('a');
            link.href = url;
            link.download = fullFilename;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);

            URL.revokeObjectURL(url);

            this.emit('downloaded', { filename: fullFilename, format });

        } catch (error) {
            console.error('Download failed:', error);
            this.emit('downloadError', error);
        }
    }

    getFileExtension(format) {
        const extensions = {
            'render2go': '.r2g'
        };
        return extensions[format] || '.txt';
    }

    // 预览脚本
    previewScript(format = 'render2go') {
        try {
            const script = this.exportAsScript(format);
            this.showPreviewModal(script, format);
        } catch (error) {
            console.error('Preview failed:', error);
            alert('预览失败: ' + error.message);
        }
    }

    showPreviewModal(script, format) {
        // 移除已存在的模态框
        const existingModal = document.querySelector('.export-modal');
        if (existingModal) {
            existingModal.remove();
        }

        const modal = Utils.createElement('div', 'export-modal');
        modal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h3>脚本预览 (${format.toUpperCase()})</h3>
                    <button class="close-btn">&times;</button>
                </div>
                <div class="modal-body">
                    <pre class="script-preview"><code>${this.escapeHtml(script)}</code></pre>
                </div>
                <div class="modal-footer">
                    <button class="copy-btn">复制代码</button>
                    <button class="download-btn">下载文件</button>
                    <button class="close-modal-btn">关闭</button>
                </div>
            </div>
            <div class="modal-backdrop"></div>
        `;

        document.body.appendChild(modal);

        // 绑定事件
        const closeBtn = modal.querySelector('.close-btn');
        const closeModalBtn = modal.querySelector('.close-modal-btn');
        const backdrop = modal.querySelector('.modal-backdrop');
        const copyBtn = modal.querySelector('.copy-btn');
        const downloadBtn = modal.querySelector('.download-btn');

        const closeModal = () => modal.remove();

        closeBtn.addEventListener('click', closeModal);
        closeModalBtn.addEventListener('click', closeModal);
        backdrop.addEventListener('click', closeModal);

        copyBtn.addEventListener('click', () => {
            navigator.clipboard.writeText(script).then(() => {
                copyBtn.textContent = '已复制!';
                setTimeout(() => {
                    copyBtn.textContent = '复制代码';
                }, 2000);
            });
        });

        downloadBtn.addEventListener('click', () => {
            const filename = app.scene.name || 'animation';
            this.downloadScript(filename, format);
        });

        // ESC键关闭
        const handleKeyDown = (e) => {
            if (e.key === 'Escape') {
                closeModal();
                document.removeEventListener('keydown', handleKeyDown);
            }
        };
        document.addEventListener('keydown', handleKeyDown);
    }

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    // 项目保存/加载
    saveProject(filename) {
        try {
            const projectData = {
                version: '1.0',
                scene: app.scene.toJSON(),
                timeline: app.timeline.toJSON(),
                objects: app.objectManager.toJSON(),
                createdAt: new Date().toISOString(),
                modifiedAt: new Date().toISOString()
            };

            const jsonStr = JSON.stringify(projectData, null, 2);
            const blob = new Blob([jsonStr], { type: 'application/json;charset=utf-8' });
            const url = URL.createObjectURL(blob);

            const link = document.createElement('a');
            link.href = url;
            link.download = filename.endsWith('.r2gp') ? filename : filename + '.r2gp';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);

            URL.revokeObjectURL(url);

            this.emit('projectSaved', { filename });

        } catch (error) {
            console.error('Save project failed:', error);
            this.emit('saveError', error);
        }
    }

    loadProject(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();

            reader.onload = (e) => {
                try {
                    const projectData = JSON.parse(e.target.result);

                    // 验证项目数据
                    if (!projectData.version || !projectData.scene) {
                        throw new Error('Invalid project file format');
                    }

                    // 清空当前项目
                    app.scene.clear();
                    app.timeline.clear();

                    // 加载数据
                    app.scene.fromJSON(projectData.scene);
                    app.timeline.fromJSON(projectData.timeline);

                    this.emit('projectLoaded', projectData);
                    resolve(projectData);

                } catch (error) {
                    console.error('Load project failed:', error);
                    this.emit('loadError', error);
                    reject(error);
                }
            };

            reader.onerror = () => {
                const error = new Error('Failed to read file');
                this.emit('loadError', error);
                reject(error);
            };

            reader.readAsText(file);
        });
    }

    // 设置面板
    showExportSettings() {
        // 显示导出设置对话框
        const modal = Utils.createElement('div', 'export-settings-modal');
        modal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h3>导出设置</h3>
                    <button class="close-btn">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="setting-group">
                        <label>输出格式:</label>
                        <select id="exportFormat">
                            <option value="render2go">Render2Go (.r2g)</option>
                        </select>
                    </div>
                    <div class="setting-group">
                        <label>文件名:</label>
                        <input type="text" id="exportFilename" value="${app.scene.name || 'animation'}">
                    </div>
                    <div class="setting-group">
                        <label>
                            <input type="checkbox" id="includeComments" checked>
                            包含注释
                        </label>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="previewBtn">预览</button>
                    <button id="exportBtn">导出</button>
                    <button class="close-modal-btn">取消</button>
                </div>
            </div>
            <div class="modal-backdrop"></div>
        `;

        document.body.appendChild(modal);

        // 绑定事件
        const closeModal = () => modal.remove();
        modal.querySelector('.close-btn').addEventListener('click', closeModal);
        modal.querySelector('.close-modal-btn').addEventListener('click', closeModal);
        modal.querySelector('.modal-backdrop').addEventListener('click', closeModal);

        modal.querySelector('#previewBtn').addEventListener('click', () => {
            const format = modal.querySelector('#exportFormat').value;
            this.previewScript(format);
        });

        modal.querySelector('#exportBtn').addEventListener('click', () => {
            const format = modal.querySelector('#exportFormat').value;
            const filename = modal.querySelector('#exportFilename').value;
            this.downloadScript(filename, format);
            closeModal();
        });
    }
}

// 导出
window.ExportManager = ExportManager;
window.Render2GoGenerator = Render2GoGenerator;
